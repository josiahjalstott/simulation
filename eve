from tkinter import *
import random

#build the application
class App():
    def __init__(self):
        pass

    #introduction to zero-player game "EVE"
    def introduction(self):
        self.root = Tk()
        self.root.title("EVE")
        self.root.geometry("528x528")

        Label(self.root, text="EVE", font=("Helvetica", 36)).pack()
        Label(self.root, text="A SIMULATION OF LIFE", font=("Helvetica", 16)).pack()

        tutorial_button = Button(text="TUTORIAL", command=self.tutorial_1).pack()
        begin_button = Button(text="START", command=self.run_eve).pack()
        end_button = Button(text="QUIT", command=self.root.destroy).pack()


    #first page of tutorial
    def tutorial_1(self):
        self.root.destroy()
        self.root = Tk()
        self.root.title("EVE")
        tutorial = Life()
        Label(self.root, text="This is EVE, a universe not unlike our own.", font=("Helvetica", 16)).grid(row = 0, column = 1)
        Label(self.root, text="Without life, EVE is devoid of meaning and purpose.", font=("Helvetica", 16)).grid(row = 1, column = 1)
        Label(self.root, text="Would you like to create life?", font=("Helvetica", 16)).grid(row = 4, column = 1)
        yes_button = Button(text="YES", command=self.tutorial_2).grid(row = 5, column = 0)
        no_button = Button(text="NO", command=self.empty_universe).grid(row = 5, column = 1)
        end_button = Button(text="QUIT", command=self.root.destroy).grid(row = 5, column = 2)
        tutorial.build_interface()
        tutorial.reset()
        self.root.mainloop()

    #second page of tutorial
    def tutorial_2(self):
        self.root.destroy()
        self.root = Tk()
        self.root.title("EVE")
        tutorial = Life()
        Label(self.root, text="This is a particle of life.", font=("Helvetica", 16)).grid(row = 0, column = 1)
        Label(self.root, text="By changing the particle's rate of birth and death,", font=("Helvetica", 16)).grid(row = 1, column = 1)
        Label(self.root, text="you can influence the fate of life within the EVE universe.", font=("Helvetica", 16)).grid(row = 2, column = 1)
        Label(self.root, text="Want to give it a try?", font=("Helvetica", 16)).grid(row = 4, column = 1)
        next_button = Button(text="BEGIN", command=self.run_eve).grid(row = 5, column = 0)
        end_button = Button(text="QUIT", command=self.root.destroy).grid(row = 5, column = 2)
        tutorial.build_interface()
        tutorial.reset()
        tutorial.form()
        self.root.mainloop()

    #a forever empty universe
    def empty_universe(self):
        self.root.destroy()
        self.root = Tk()
        self.root.title("EVE")
        tutorial = Life()
        Label(self.root, text="There is no future.", font=("Helvetica", 16)).grid(row = 0, column = 1)
        Label(self.root, text="There is only nothingness.", font=("Helvetica", 16)).grid(row = 1, column = 1)
        next_button = Button(text="RESTART", command=self.restart).grid(row = 4, column = 0)
        end_button = Button(text="QUIT", command=self.root.destroy).grid(row = 4, column = 2)
        tutorial.build_interface()
        tutorial.reset()

    #build the state and projection of matrix and project it onto canvas
    def build_interface(self):

        self.m = 528 #width and height of canvas
        self.n = 75 #number of rows and columns
        self.oval_size = 7 #size of GUI ovals
        self.color0 = "black" #color of death
        self.color1 = "white" #color of life
        self.outline = "gray13" #color of oval outlines
        
        self.state = [[-1 for row in range(-1, self.n+2)] for col in range(-1, self.n+2)] #the 'state' is the integer held by that projection
        self.projection = [[-1 for row in range(-1, self.n+2)] for col in range(-1, self.n+2)] #the 'projection' is the reaction to the state
        self.canvas = Canvas(width=self.m, height=self.m, bd=0, bg=self.color0) #build canvas
        self.canvas.grid(row = 3, column = 1)

    #build user input controls
    def build_controls(self):
        begintrial_button = Button(text="ADD RANDOM PARTICLE", command=self.form).grid(row = 0, column = 0, sticky = E)
        
        Button(self.root, text="BEGIN TRIAL", command= self.begin).grid(row = 0, column = 1)

        begintrial_button = Button(text="RESET UNIVERSE", command=self.reset).grid(row = 0, column = 2)

        Label(self.root, text="Rate of Death:").grid(row = 1, column = 0)
        death_stat = Scale(self.root, tickinterval = 0, from_=0, to=100, orient=HORIZONTAL, command = self.get_death_stat).grid(row = 2, column = 0)

        Label(self.root, text="Rate of Birth:").grid(row = 1, column = 1)
        procreate_stat = Scale(self.root, tickinterval = 0, from_=0, to=100, orient=HORIZONTAL, command = self.get_procreate_stat).grid(row = 2, column = 1)


        quit_button = Button(text="QUIT", command=self.root.destroy).grid(row = 2, column = 2)

        self.reset()

    #build a generic root for EVE simulation
    def build_root(self):
        self.root = Tk()
        self.root.title("EVE")

    #begin program
    def run_eve(self):
        self.root.destroy()
        eve = Life()
        eve.build_root()
        eve.build_interface()
        eve.build_controls()

    #restart to introduction
    def restart(self):
        self.root.destroy()
        self.introduction()


    #begin turns
    def begin(self):
        self.play = True
        self.revolution()

    #get death rate from slider
    def get_death_stat(self, death_stat):
        self.death_stat = int(death_stat)/2

    #get birth rate from slider
    def get_procreate_stat(self, procreate_stat):
        self.procreate_stat = int(procreate_stat)

    #one turn of game
    def revolution(self):
        if self.play == True:

            for y in range(0, self.n):
                for x in range(0, self.n):

                    if self.state[x][y] == 0:
                        pass

                    if self.state[x][y] == 1:

                        #analysis of one random neighboring space
                        s = random.randint(-1,1)
                        t = random.randint(-1,1)

                        #movement or procreation upon analyzing empty space
                        if self.state[x+s][y+t] == 0:
                            u = random.randint(0,100)
                            if u < self.procreate_stat:
                                self.procreate(x, y, s, t)

                            if u >= self.procreate_stat:
                                self.move(x, y, s, t)

                        #possibility of overproduction if analyzing same-species life
                        if self.state[x+s][y+t] == 1:
                            u = random.randint(0,100)
                            if u < self.death_stat:
                                self.die(x, y, s, t)


            #restart loop                   
            self.root.after(100, self.revolution)

        
    #reset trial
    def reset(self):
        self.play = False
        #create spaces
        for y in range(1, self.n):
            for x in range(1, self.n):
                self.state[x][y] = 0
                self.projection[x][y] = self.canvas.create_oval((x*self.oval_size, y*self.oval_size, x*self.oval_size+self.oval_size, y*self.oval_size+self.oval_size), outline= self.outline, fill= self.color0)
                #Note that these spaces are black, and are thus invisible unless outline color is changed
                #For fun, try changing outline to "white" to see it better


class Life(App):
    def __init__(self):
        super().__init__()
    
    #form initial existence of particle
    def form(self):
        x = random.randint(20, self.n - 20)
        y = random.randint(20, self.n - 20)
        self.state[x][y] = 1
        self.canvas.itemconfig(self.projection[x][y], fill= self.color1)


    #procreation
    def procreate(self, x, y, s, t):
        self.state[x+s][y+t] = 1
        self.canvas.itemconfig(self.projection[x+s][y+t], fill= self.color1)


    #movement
    def move(self, x, y, s, t):
        self.state[x][y] = 0
        self.canvas.itemconfig(self.projection[x][y], fill= self.color0)
        self.state[x+s][y+t] = 1
        self.canvas.itemconfig(self.projection[x+s][y+t], fill= self.color1)

    #death
    def die(self, x, y, s, t):
        self.state[x+s][y+t] = 0
        self.canvas.itemconfig(self.projection[x+s][y+t], fill= self.color0)



#main program
def run():
    app = App()
    app.introduction()


#run program
run()

